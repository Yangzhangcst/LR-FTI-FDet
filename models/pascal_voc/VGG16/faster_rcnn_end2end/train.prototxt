name: "VGG_ILSVRC_16_layers"
layer {
  name: 'input-data'
  type: 'Python'
  top: 'data'
  top: 'im_info'
  top: 'gt_boxes'
  python_param {
    module: 'roi_data_layer.layer'
    layer: 'RoIDataLayer'
    param_str: "'num_classes': 3"     #Here should be changing!
  }
}

layer {
  name: "conv1"
  type: "Convolution"
  bottom: "data"
  top: "conv1"
  convolution_param {
    num_output: 64
    kernel_size: 3
    stride: 2
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "relu_conv1"
  type: "ReLU"
  bottom: "conv1"
  top: "conv1"
}
layer {
  name: "pool1"
  type: "Pooling"
  bottom: "conv1"
  top: "pool1"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "fire2/squeeze1x1"
  type: "Convolution"
  bottom: "pool1"
  top: "fire2/squeeze1x1"
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "fire2/relu_squeeze1x1"
  type: "ReLU"
  bottom: "fire2/squeeze1x1"
  top: "fire2/squeeze1x1"
}
layer {
  name: "fire2/expand3x3/dw"
  type: "DepthwiseConvolution"
  bottom: "fire2/squeeze1x1"
  top: "fire2/expand3x3/dw"
  convolution_param {
    num_output: 64
    bias_term: false
    pad: 1
    kernel_size: 3
    group: 64
    #engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "fire2/relu_expand3x3/dw"
  type: "ReLU"
  bottom: "fire2/expand3x3/dw"
  top: "fire2/expand3x3/dw"
}
layer {
  name: "fire2/expand3x3"
  type: "Convolution"
  bottom: "fire2/expand3x3/dw"
  top: "fire2/expand3x3"
  convolution_param {
    num_output: 64
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "fire2/relu_expand3x3"
  type: "ReLU"
  bottom: "fire2/expand3x3"
  top: "fire2/expand3x3"
}

layer {
  name: "fire3/squeeze1x1"
  type: "Convolution"
  bottom: "fire2/expand3x3"
  top: "fire3/squeeze1x1"
  convolution_param {
    num_output: 64
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "fire3/relu_squeeze1x1"
  type: "ReLU"
  bottom: "fire3/squeeze1x1"
  top: "fire3/squeeze1x1"
}
layer {
  name: "fire3/expand3x3/dw"
  type: "DepthwiseConvolution"
  bottom: "fire3/squeeze1x1"
  top: "fire3/expand3x3/dw"
  convolution_param {
    num_output: 64
    bias_term: false
    pad: 1
    kernel_size: 3
    group: 64
    #engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "fire3/relu_expand3x3/dw"
  type: "ReLU"
  bottom: "fire3/expand3x3/dw"
  top: "fire3/expand3x3/dw"
}
layer {
  name: "fire3/expand3x3"
  type: "Convolution"
  bottom: "fire3/expand3x3/dw"
  top: "fire3/expand3x3"
  convolution_param {
    num_output: 64
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "fire3/relu_expand3x3"
  type: "ReLU"
  bottom: "fire3/expand3x3"
  top: "fire3/expand3x3"
}
layer {
  name: "pool3"
  type: "Pooling"
  bottom: "fire3/expand3x3"
  top: "pool3"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "fire4/squeeze1x1"
  type: "Convolution"
  bottom: "pool3"
  top: "fire4/squeeze1x1"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "fire4/relu_squeeze1x1"
  type: "ReLU"
  bottom: "fire4/squeeze1x1"
  top: "fire4/squeeze1x1"
}

layer {
  name: "fire4/expand3x3/dw"
  type: "DepthwiseConvolution"
  bottom: "fire4/squeeze1x1"
  top: "fire4/expand3x3/dw"
  convolution_param {
    num_output: 128
    bias_term: false
    pad: 1
    kernel_size: 3
    group: 128
    #engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire4/relu_expand3x3/dw"
  type: "ReLU"
  bottom: "fire4/expand3x3/dw"
  top: "fire4/expand3x3/dw"
}
layer {
  name: "fire4/expand3x3"
  type: "Convolution"
  bottom: "fire4/expand3x3/dw"
  top: "fire4/expand3x3"
  convolution_param {
    num_output: 128
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire4/relu_expand3x3"
  type: "ReLU"
  bottom: "fire4/expand3x3"
  top: "fire4/expand3x3"
}

layer {
  name: "fire5/squeeze1x1"
  type: "Convolution"
  bottom: "fire4/expand3x3"
  top: "fire5/squeeze1x1"
  convolution_param {
    num_output: 128
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire5/relu_squeeze1x1"
  type: "ReLU"
  bottom: "fire5/squeeze1x1"
  top: "fire5/squeeze1x1"
}

layer {
  name: "fire5/expand3x3/dw"
  type: "DepthwiseConvolution"
  bottom: "fire5/squeeze1x1"
  top: "fire5/expand3x3/dw"
  convolution_param {
    num_output: 128
    bias_term: false
    pad: 1
    kernel_size: 3
    group: 128
    #engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire5/relu_expand3x3/dw"
  type: "ReLU"
  bottom: "fire5/expand3x3/dw"
  top: "fire5/expand3x3/dw"
}
layer {
  name: "fire5/expand3x3"
  type: "Convolution"
  bottom: "fire5/expand3x3/dw"
  top: "fire5/expand3x3"
  convolution_param {
    num_output: 128
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}
layer {
  name: "fire5/relu_expand3x3"
  type: "ReLU"
  bottom: "fire5/expand3x3"
  top: "fire5/expand3x3"
}
layer {
  name: "pool5"
  type: "Pooling"
  bottom: "fire5/expand3x3"
  top: "pool5"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "fire6/squeeze1x1"
  type: "Convolution"
  bottom: "pool5"
  top: "fire6/squeeze1x1"
  convolution_param {
    num_output: 256
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire6/relu_squeeze1x1"
  type: "ReLU"
  bottom: "fire6/squeeze1x1"
  top: "fire6/squeeze1x1"
}

layer {
  name: "fire6/expand3x3/dw"
  type: "DepthwiseConvolution"
  bottom: "fire6/squeeze1x1"
  top: "fire6/expand3x3/dw"
  convolution_param {
    num_output: 256
    bias_term: false
    pad: 1
    kernel_size: 3
    group: 256
    #engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire6/relu_expand3x3/dw"
  type: "ReLU"
  bottom: "fire6/expand3x3/dw"
  top: "fire6/expand3x3/dw"
}
layer {
  name: "fire6/expand3x3"
  type: "Convolution"
  bottom: "fire6/expand3x3/dw"
  top: "fire6/expand3x3"
  convolution_param {
    num_output: 256
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire6/relu_expand3x3"
  type: "ReLU"
  bottom: "fire6/expand3x3"
  top: "fire6/expand3x3"
}

layer {
  name: "fire7/squeeze1x1"
  type: "Convolution"
  bottom: "fire6/expand3x3"
  top: "fire7/squeeze1x1"
  convolution_param {
    num_output: 256
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire7/relu_squeeze1x1"
  type: "ReLU"
  bottom: "fire7/squeeze1x1"
  top: "fire7/squeeze1x1"
}

layer {
  name: "fire7/expand3x3/dw"
  type: "DepthwiseConvolution"
  bottom: "fire7/squeeze1x1"
  top: "fire7/expand3x3/dw"
  convolution_param {
    num_output: 256
    bias_term: false
    pad: 1
    kernel_size: 3
    group: 256
    #engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire7/relu_expand3x3/dw"
  type: "ReLU"
  bottom: "fire7/expand3x3/dw"
  top: "fire7/expand3x3/dw"
}
layer {
  name: "fire7/expand3x3"
  type: "Convolution"
  bottom: "fire7/expand3x3/dw"
  top: "fire7/expand3x3"
  convolution_param {
    num_output: 256
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire7/relu_expand3x3"
  type: "ReLU"
  bottom: "fire7/expand3x3"
  top: "fire7/expand3x3"
}

layer {
  name: "fire8/squeeze1x1"
  type: "Convolution"
  bottom: "fire7/expand3x3"
  top: "fire8/squeeze1x1"
  convolution_param {
    num_output: 512
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire8/relu_squeeze1x1"
  type: "ReLU"
  bottom: "fire8/squeeze1x1"
  top: "fire8/squeeze1x1"
}

layer {
  name: "fire8/expand3x3/dw"
  type: "DepthwiseConvolution"
  bottom: "fire8/squeeze1x1"
  top: "fire8/expand3x3/dw"
  convolution_param {
    num_output: 512
    bias_term: false
    pad: 1
    kernel_size: 3
    group: 512
    #engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire8/relu_expand3x3/dw"
  type: "ReLU"
  bottom: "fire8/expand3x3/dw"
  top: "fire8/expand3x3/dw"
}
layer {
  name: "fire8/expand3x3"
  type: "Convolution"
  bottom: "fire8/expand3x3/dw"
  top: "fire8/expand3x3"
  convolution_param {
    num_output: 512
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire8/relu_expand3x3"
  type: "ReLU"
  bottom: "fire8/expand3x3"
  top: "fire8/expand3x3"
}

layer {
  name: "fire9/squeeze1x1"
  type: "Convolution"
  bottom: "fire8/expand3x3"
  top: "fire9/squeeze1x1"
  convolution_param {
    num_output: 512
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire9/relu_squeeze1x1"
  type: "ReLU"
  bottom: "fire9/squeeze1x1"
  top: "fire9/squeeze1x1"
}

layer {
  name: "fire9/expand3x3/dw"
  type: "DepthwiseConvolution"
  bottom: "fire9/squeeze1x1"
  top: "fire9/expand3x3/dw"
  convolution_param {
    num_output: 512
    bias_term: false
    pad: 1
    kernel_size: 3
    group: 512
    #engine: CAFFE
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire9/relu_expand3x3/dw"
  type: "ReLU"
  bottom: "fire9/expand3x3/dw"
  top: "fire9/expand3x3/dw"
}
layer {
  name: "fire9/expand3x3"
  type: "Convolution"
  bottom: "fire9/expand3x3/dw"
  top: "fire9/expand3x3"
  convolution_param {
    num_output: 512
    bias_term: false
    kernel_size: 1
    weight_filler {
      type: "msra"
    }
  }
}

layer {
  name: "fire9/relu_expand3x3"
  type: "ReLU"
  bottom: "fire9/expand3x3"
  top: "fire9/expand3x3"
}

#========= RPN ============
layer {
  name: "conv3_4"
  type: "Pooling"
  bottom: "fire4/expand3x3"
  top: "conv3_4"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  name: "rpn_conv3_3/3x3"
  type: "Convolution"
  bottom: "conv3_4"
  top: "rpn_conv3_3/3x3"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 192
    kernel_size: 1 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "rpn_conv3_3/3x3_bn"
  type: "BatchNorm"
  bottom: "rpn_conv3_3/3x3"
  top: "rpn_conv3_3/3x3"
}

layer {
  bottom: "rpn_conv3_3/3x3"
  top: "rpn_conv3_3/3x3"
  name: "rpn_conv3_3/3x3_scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}
layer {
  name: "rpn_conv4_3/3x3"
  type: "Convolution"
  bottom: "fire7/expand3x3"
  top: "rpn_conv4_3/3x3"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 192
    kernel_size: 1 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "rpn_conv4_3/3x3_bn"
  type: "BatchNorm"
  bottom: "rpn_conv4_3/3x3"
  top: "rpn_conv4_3/3x3"
}

layer {
  bottom: "rpn_conv4_3/3x3"
  top: "rpn_conv4_3/3x3"
  name: "rpn_conv4_3/3x3_scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  name: "rpn_conv5_3/3x3"
  type: "Convolution"
  bottom: "fire9/expand3x3"
  top: "rpn_conv5_3/3x3"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 192
    kernel_size: 1 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "rpn_conv5_3/3x3_bn"
  type: "BatchNorm"
  bottom: "rpn_conv5_3/3x3"
  top: "rpn_conv5_3/3x3"
}

layer {
  bottom: "rpn_conv5_3/3x3"
  top: "rpn_conv5_3/3x3"
  name: "rpn_conv5_3/3x3_scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}

layer {
  name: "rpn_concat/output"
  type: "Concat"
  bottom: "rpn_conv3_3/3x3"
  bottom: "rpn_conv4_3/3x3"
  bottom: "rpn_conv5_3/3x3"
  top: "rpn_concat/output"
}

layer {
  name: "rpn/output"
  type: "Convolution"
  bottom: "rpn_concat/output"
  top: "rpn/output"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 512
    kernel_size: 3 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}
layer {
  name: "rpn_relu/output"
  type: "ReLU"
  bottom: "rpn/output"
  top: "rpn/output"
}

layer {
  name: "rpn_cls_score"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_cls_score"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 18   # 2(bg/fg) * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
  name: "rpn_bbox_pred"
  type: "Convolution"
  bottom: "rpn/output"
  top: "rpn_bbox_pred"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 36   # 4 * 9(anchors)
    kernel_size: 1 pad: 0 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

layer {
   bottom: "rpn_cls_score"
   top: "rpn_cls_score_reshape"
   name: "rpn_cls_score_reshape"
   type: "Reshape"
   reshape_param { shape { dim: 0 dim: 2 dim: -1 dim: 0 } }
}

layer {
  name: 'rpn-data'
  type: 'Python'
  bottom: 'rpn_cls_score'
  bottom: 'gt_boxes'
  bottom: 'im_info'
  bottom: 'data'
  top: 'rpn_labels'
  top: 'rpn_bbox_targets'
  top: 'rpn_bbox_inside_weights'
  top: 'rpn_bbox_outside_weights'
  python_param {
    module: 'rpn.anchor_target_layer'
    layer: 'AnchorTargetLayer'
    param_str: "'feat_stride': 16"
  }
}

layer {
  name: "rpn_loss_cls"
  type: "SoftmaxWithLoss"
  bottom: "rpn_cls_score_reshape"
  bottom: "rpn_labels"
  propagate_down: 1
  propagate_down: 0
  top: "rpn_cls_loss"
  loss_weight: 1
  loss_param {
    ignore_label: -1
    normalize: true
  }
}

layer {
  name: "rpn_loss_bbox"
  type: "SmoothL1Loss"
  bottom: "rpn_bbox_pred"
  bottom: "rpn_bbox_targets"
  bottom: 'rpn_bbox_inside_weights'
  bottom: 'rpn_bbox_outside_weights'
  top: "rpn_loss_bbox"
  loss_weight: 1
  smooth_l1_loss_param { sigma: 3.0 }
}

#========= RoI Proposal ============
layer {
  name: "rpn_cls_prob"
  type: "Softmax"
  bottom: "rpn_cls_score_reshape"
  top: "rpn_cls_prob"
}

layer {
  name: 'rpn_cls_prob_reshape'
  type: 'Reshape'
  bottom: 'rpn_cls_prob'
  top: 'rpn_cls_prob_reshape'
  reshape_param { shape { dim: 0 dim: 18 dim: -1 dim: 0 } }
}

layer {
  name: 'proposal'
  type: 'Python'
  bottom: 'rpn_cls_prob_reshape'
  bottom: 'rpn_bbox_pred'
  bottom: 'im_info'
  top: 'rpn_rois'
#  top: 'rpn_scores'
  python_param {
    module: 'rpn.proposal_layer'
    layer: 'ProposalLayer'
    param_str: "'feat_stride': 16"
  }
}

layer {
  name: 'roi-data'
  type: 'Python'
  bottom: 'rpn_rois'
  bottom: 'gt_boxes'
  top: 'rois'
  top: 'labels'
  top: 'bbox_targets'
  top: 'bbox_inside_weights'
  top: 'bbox_outside_weights'
  python_param {
    module: 'rpn.proposal_target_layer'
    layer: 'ProposalTargetLayer'
    param_str: "'num_classes': 3"  # Here should be modified
  }
}

#========= RCNN ============
layer {
  name: "concat_conv3_4_5"
  type: "Concat"
  bottom: "fire9/expand3x3"
  bottom: "fire7/expand3x3"
  bottom: "conv3_4"
  top: "concat_conv3_4_5"
}
layer {
  name: "conv3_4_5"
  type: "Convolution"
  bottom: "concat_conv3_4_5"
  top: "conv3_4_5"
  param { lr_mult: 1.0 }
  param { lr_mult: 2.0 }
  convolution_param {
    num_output: 512
    kernel_size: 1 pad: 1 stride: 1
    weight_filler { type: "gaussian" std: 0.01 }
    bias_filler { type: "constant" value: 0 }
  }
}

#----------------------new conv layer------------------
layer {
    bottom: "conv3_4_5"
    top: "conv_new_1"
    name: "conv_new_1"
    type: "Convolution"
    convolution_param {
        num_output: 256
        kernel_size: 1
        pad: 0
        weight_filler {
            type: "gaussian"
            std: 0.01
        }
        bias_filler {
            type: "constant"
            value: 0
        }
    }
    param {
        lr_mult: 1.0
    }
    param {
        lr_mult: 2.0
    }
}

layer {
    bottom: "conv_new_1"
    top: "conv_new_1"
    name: "conv_new_1_relu"
    type: "ReLU"
}

layer {
    bottom: "conv_new_1"
    top: "rfcn_cls"
    name: "rfcn_cls"
    type: "Convolution"
    convolution_param {
        num_output: 147 #2*(7^2) cls_num*(score_maps_size^2)  # Here should be modified
        kernel_size: 1
        pad: 0
        weight_filler {
            type: "gaussian"
            std: 0.01
        }
        bias_filler {
            type: "constant"
            value: 0
        }
    }
    param {
        lr_mult: 1.0
    }
    param {
        lr_mult: 2.0
    }
}
layer {
    bottom: "conv_new_1"
    top: "rfcn_bbox"
    name: "rfcn_bbox"
    type: "Convolution"
    convolution_param {
        num_output: 588 #8*(7^2) cls_num*(score_maps_size^2)  
        kernel_size: 1
        pad: 0
        weight_filler {
            type: "gaussian"
            std: 0.01
        }
        bias_filler {
            type: "constant"
            value: 0
        }
    }
    param {
        lr_mult: 1.0
    }
    param {
        lr_mult: 2.0
    }
}

#--------------position sensitive RoI pooling--------------
layer {
    bottom: "rfcn_cls"
    bottom: "rois"
    top: "psroipooled_cls_rois"
    name: "psroipooled_cls_rois"
    type: "PSROIPooling"
    psroi_pooling_param {
        spatial_scale: 0.0625
        output_dim: 3      # Here should be modified
        group_size: 7
    }
}

layer {
    bottom: "psroipooled_cls_rois"
    top: "cls_score"
    name: "ave_cls_score_rois"
    type: "Pooling"
    pooling_param {
        pool: AVE
        kernel_size: 7
        stride: 7
    }
}


layer {
    bottom: "rfcn_bbox"
    bottom: "rois"
    top: "psroipooled_loc_rois"
    name: "psroipooled_loc_rois"
    type: "PSROIPooling"
    psroi_pooling_param {
        spatial_scale: 0.0625
        output_dim: 12 # Here should be modified
        group_size: 7
    }
}

layer {
    bottom: "psroipooled_loc_rois"
    top: "bbox_pred"
    name: "ave_bbox_pred_rois"
    type: "Pooling"
    pooling_param {
        pool: AVE
        kernel_size: 7
        stride: 7
    }
}

#-----------------------output------------------------
layer {
   name: "loss"
   type: "SoftmaxWithLoss"
   bottom: "cls_score"
   bottom: "labels"
   top: "loss_cls"
   loss_weight: 1
   loss_param {
        ignore_label: -1
   }
   propagate_down: true
   propagate_down: false
}

layer {
   name: "accuarcy"
   type: "Accuracy"
   bottom: "cls_score"
   bottom: "labels"
   top: "accuarcy"
   #include: { phase: TEST }
   accuracy_param {
        ignore_label: -1
   }
   propagate_down: false
   propagate_down: false
}


layer {
  name: "loss_bbox"
  type: "SmoothL1Loss"
  bottom: "bbox_pred"
  bottom: "bbox_targets"
  bottom: "bbox_inside_weights"
  bottom: "bbox_outside_weights"
  top: "loss_bbox"
  loss_weight: 1
}

